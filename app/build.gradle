apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.haichenyi.kotlinmvp"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
        arg("AROUTER_GENERATE_DOC", "enable")
        arg("room.schemaLocation": "$projectDir/schemas".toString(), "room.incremental": "true")
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // debugImplementation because LeakCanary should only run in debug builds.
    // Don't need init,it will be auto init
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-3'

    //dagger2_start
    def dagger = "2.23.2"
    implementation "com.google.dagger:dagger-android:$dagger"
    implementation "com.google.dagger:dagger-android-support:$dagger" // if you use the support libraries
    kapt "com.google.dagger:dagger-android-processor:$dagger"
    implementation "com.google.dagger:dagger:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"
    //dagger2_end

    //网络请求RxJava+Retrofit+OkHttp_start
    /*retrofit2*/
    def retrofit = "2.6.0"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:4.0.1"
    /*rxjava2:rxandroid*/
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    /*rxjava与activity生命周期同步*/
    implementation 'com.uber.autodispose:autodispose-android-archcomponents:1.3.0'
    //网络请求RxJava+Retrofit+OkHttp_end

    //权限管理
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'

    //ARouter路由start
    implementation 'com.alibaba:arouter-api:1.5.0'
    kapt 'com.alibaba:arouter-compiler:1.2.2'
    //ARouter路由end

    //room数据库start
    def room_version = "2.2.0-alpha01"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version" // use kapt for Kotlin
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"
    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"
    //room数据库end
    //kotlin协程
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0-RC'
}
